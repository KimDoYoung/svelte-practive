// src/routes/diary/[ymd]/+page.ts
import type { DiaryResponse } from '$lib/types';
import type { PageLoad } from './$types';

const API_BASE_URL = import.meta.env.VITE_KALPADB_API_URL_BASE;

export const load: PageLoad = async ({ params, fetch }) => {
    const { ymd } = params;

    try {
        // `fetch`를 사용하여 데이터 요청
        const url = `${API_BASE_URL}/diary/${ymd}`;
        console.log(`API 요청 ===> GET ${url}`);
        const response = await fetch(url);
        
        // 응답이 성공적이지 않으면 오류 발생
        if (!response.ok) {
            throw new Error(`API 요청 실패: ${response.status}`);
        }

        const diary: DiaryResponse = await response.json();
        console.log('데이터 로드 성공:', diary);
        return { diary };
    } catch (error) {
        console.error("데이터 로드 오류:", error);
        return {
            status: 404,
            error: new Error('데이터를 불러오는 중 오류가 발생했습니다.')
        };
    }
};
-----------------------------------------------------------
<script lang="ts">
    import { onMount } from 'svelte';
    import type { DiaryResponse } from './types'; // DiaryResponse 타입 정의
    export let ymd = ''; // 초기 날짜

    let summary = '';
    let content = '';
    let attachments: string[] = [];

    // API URL
    const API_URL = 'http://localhost:8088/api/v1/diary';

    // 페이지 로드 시 초기 데이터 가져오기
    async function fetchDiaryData(date: string) {
        try {
            const response = await fetch(`${API_URL}/${date}`);
            if (response.ok) {
                const data: DiaryResponse = await response.json();
                summary = data.summary || '';
                content = data.content || '';
                attachments = data.attachments || [];
            } else {
                summary = '';
                content = '';
                attachments = [];
            }
        } catch (error) {
            console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);
        }
    }

    // 이전 날짜로 이동
    function prevClick() {
        if (ymd.length !== 8) return;
        changeDate(-1);
    }

    // 다음 날짜로 이동
    function nextClick() {
        if (ymd.length !== 8) return;
        changeDate(1);
    }

    // 오늘 날짜로 이동
    function todayClick() {
        ymd = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        fetchDiaryData(ymd);
    }

    // 날짜 변경 함수
    function changeDate(days: number) {
        const year = parseInt(ymd.slice(0, 4));
        const month = parseInt(ymd.slice(4, 6)) - 1;
        const day = parseInt(ymd.slice(6, 8));
        const date = new Date(year, month, day);
        date.setDate(date.getDate() + days);
        ymd = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;
        fetchDiaryData(ymd);
    }

    // 저장 버튼 클릭 시 데이터 저장
    async function saveDiary() {
        try {
            const getResponse = await fetch(`${API_URL}/${ymd}`);
            const method = getResponse.ok ? 'PUT' : 'POST';
            const saveResponse = await fetch(
                method === 'PUT' ? `${API_URL}/${ymd}` : API_URL,
                {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ymd: ymd,
                        content: content,
                        summary: summary,
                        attachments: attachments,
                    }),
                }
            );

            if (!saveResponse.ok) {
                console.error('저장 중 오류 발생:', await saveResponse.text());
            } else {
                alert('저장되었습니다.');
            }
        } catch (error) {
            console.error('저장 중 오류 발생:', error);
        }
    }

    // 컴포넌트 로드 시 초기 데이터를 불러옴
    onMount(() => {
        fetchDiaryData(ymd);
    });
</script>

<form>
    <div class="date-area">
        <input type="text" name="ymd" id="ymd" bind:value={ymd} maxlength="8">
        <button type="button" class="icon-button" aria-label="Previous" title="이전" on:click={prevClick}>
            <i class="fas fa-arrow-left"></i>
        </button>
        <button type="button" class="icon-button" aria-label="Today" title="오늘" on:click={todayClick}>
            <i class="fas fa-calendar-day"></i>
        </button>
        <button type="button" class="icon-button" aria-label="Next" title="다음" on:click={nextClick}>
            <i class="fas fa-arrow-right"></i>
        </button>
        <button type="button" class="icon-button" on:click={saveDiary}>
            <i class="fas fa-save"></i> 저장
        </button>
    </div>
    <div class="summary-area">
        <input type="text" name="summary" id="summary" bind:value={summary}>
    </div>
    <div class="content-area">
        <textarea name="content" id="content" bind:value={content} style="height:300px"></textarea>
    </div>
</form>

<style>
    .date-area {
        display: flex;
        width: 40vw;
        gap: 5px;
        align-items: center;
    }

    input[type="text"], .summary-area input[type="text"] {
        flex: 1;
        padding: 8px;
        font-size: 1em;
        border: 1px solid #ccc;
        border-radius: 4px;
        height: 40px;
        box-sizing: border-box;
    }

    .icon-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: auto;
        padding: 8px 12px;
        border: none;
        color: white;
        background-color: cornflowerblue;
        border-radius: 4px;
        cursor: pointer;
    }

    .content-area textarea {
        width: 100%;
        padding: 8px;
        font-size: 1em;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
</style>
